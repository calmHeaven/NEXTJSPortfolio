{
    "sourceFile": "src/components/TimeLine/TimeLine.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 20,
            "patches": [
                {
                    "date": 1727020085735,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1727096560363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,11 +42,11 @@\n   //   window.addEventListener('resize', handleResize);\n   // }, []);\n \n   return (\n-    <div>\n-      Timeline\n-    </div>\n+    <Section>\n+      \n+    </Section>\n   );\n };\n \n export default Timeline;\n"
                },
                {
                    "date": 1727096568488,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,52 @@\n+import React, { useState, useRef, useEffect } from 'react';\n+\n+import { CarouselButton, CarouselButtonDot, CarouselButtons, CarouselContainer, CarouselItem, CarouselItemImg, CarouselItemText, CarouselItemTitle, CarouselMobileScrollNode } from './TimeLineStyles';\n+import { Section, SectionDivider, SectionText, SectionTitle } from '../../styles/GlobalComponents';\n+import { TimeLineData } from '../../constants/constants';\n+\n+const TOTAL_CAROUSEL_COUNT = TimeLineData.length;\n+\n+const Timeline = () => {\n+  // const [activeItem, setActiveItem] = useState(0);\n+  // const carouselRef = useRef();\n+\n+  // const scroll = (node, left) => {\n+  //   return node.scrollTo({ left, behavior: 'smooth' });\n+  // }\n+\n+  // const handleClick = (e, i) => {\n+  //   e.preventDefault();\n+\n+  //   if (carouselRef.current) {\n+  //     const scrollLeft = Math.floor(carouselRef.current.scrollWidth * 0.7 * (i / TimeLineData.length));\n+      \n+  //     scroll(carouselRef.current, scrollLeft);\n+  //   }\n+  // }\n+\n+  // const handleScroll = () => {\n+  //   if (carouselRef.current) {\n+  //     const index = Math.round((carouselRef.current.scrollLeft / (carouselRef.current.scrollWidth * 0.7)) * TimeLineData.length);\n+\n+  //     setActiveItem(index);\n+  //   }\n+  // }\n+\n+  // // snap back to beginning of scroll when window is resized\n+  // // avoids a bug where content is covered up if coming from smaller screen\n+  // useEffect(() => {\n+  //   const handleResize = () => {\n+  //     scroll(carouselRef.current, 0);\n+  //   }\n+\n+  //   window.addEventListener('resize', handleResize);\n+  // }, []);\n+\n+  return (\n+    <Section id='about'>\n+\n+    </Section>\n+  );\n+};\n+\n+export default Timeline;\n"
                },
                {
                    "date": 1727096583499,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,54 @@\n+import React, { useState, useRef, useEffect } from 'react';\n+\n+import { CarouselButton, CarouselButtonDot, CarouselButtons, CarouselContainer, CarouselItem, CarouselItemImg, CarouselItemText, CarouselItemTitle, CarouselMobileScrollNode } from './TimeLineStyles';\n+import { Section, SectionDivider, SectionText, SectionTitle } from '../../styles/GlobalComponents';\n+import { TimeLineData } from '../../constants/constants';\n+\n+const TOTAL_CAROUSEL_COUNT = TimeLineData.length;\n+\n+const Timeline = () => {\n+  // const [activeItem, setActiveItem] = useState(0);\n+  // const carouselRef = useRef();\n+\n+  // const scroll = (node, left) => {\n+  //   return node.scrollTo({ left, behavior: 'smooth' });\n+  // }\n+\n+  // const handleClick = (e, i) => {\n+  //   e.preventDefault();\n+\n+  //   if (carouselRef.current) {\n+  //     const scrollLeft = Math.floor(carouselRef.current.scrollWidth * 0.7 * (i / TimeLineData.length));\n+      \n+  //     scroll(carouselRef.current, scrollLeft);\n+  //   }\n+  // }\n+\n+  // const handleScroll = () => {\n+  //   if (carouselRef.current) {\n+  //     const index = Math.round((carouselRef.current.scrollLeft / (carouselRef.current.scrollWidth * 0.7)) * TimeLineData.length);\n+\n+  //     setActiveItem(index);\n+  //   }\n+  // }\n+\n+  // // snap back to beginning of scroll when window is resized\n+  // // avoids a bug where content is covered up if coming from smaller screen\n+  // useEffect(() => {\n+  //   const handleResize = () => {\n+  //     scroll(carouselRef.current, 0);\n+  //   }\n+\n+  //   window.addEventListener('resize', handleResize);\n+  // }, []);\n+\n+  return (\n+    <Section id='about'>\n+<Sectiontitle>\n+  \n+</Sectiontitle>\n+    </Section>\n+  );\n+};\n+\n+export default Timeline;\n"
                },
                {
                    "date": 1727096591787,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,52 @@\n+import React, { useState, useRef, useEffect } from 'react';\n+\n+import { CarouselButton, CarouselButtonDot, CarouselButtons, CarouselContainer, CarouselItem, CarouselItemImg, CarouselItemText, CarouselItemTitle, CarouselMobileScrollNode } from './TimeLineStyles';\n+import { Section, SectionDivider, SectionText, SectionTitle } from '../../styles/GlobalComponents';\n+import { TimeLineData } from '../../constants/constants';\n+\n+const TOTAL_CAROUSEL_COUNT = TimeLineData.length;\n+\n+const Timeline = () => {\n+  // const [activeItem, setActiveItem] = useState(0);\n+  // const carouselRef = useRef();\n+\n+  // const scroll = (node, left) => {\n+  //   return node.scrollTo({ left, behavior: 'smooth' });\n+  // }\n+\n+  // const handleClick = (e, i) => {\n+  //   e.preventDefault();\n+\n+  //   if (carouselRef.current) {\n+  //     const scrollLeft = Math.floor(carouselRef.current.scrollWidth * 0.7 * (i / TimeLineData.length));\n+      \n+  //     scroll(carouselRef.current, scrollLeft);\n+  //   }\n+  // }\n+\n+  // const handleScroll = () => {\n+  //   if (carouselRef.current) {\n+  //     const index = Math.round((carouselRef.current.scrollLeft / (carouselRef.current.scrollWidth * 0.7)) * TimeLineData.length);\n+\n+  //     setActiveItem(index);\n+  //   }\n+  // }\n+\n+  // // snap back to beginning of scroll when window is resized\n+  // // avoids a bug where content is covered up if coming from smaller screen\n+  // useEffect(() => {\n+  //   const handleResize = () => {\n+  //     scroll(carouselRef.current, 0);\n+  //   }\n+\n+  //   window.addEventListener('resize', handleResize);\n+  // }, []);\n+\n+  return (\n+    <Section id='about'>\n+<Sectiontitle>About me</SectionTitle>\n+    </Section>\n+  );\n+};\n+\n+export default Timeline;\n"
                },
                {
                    "date": 1727096598044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,52 @@\n+import React, { useState, useRef, useEffect } from 'react';\n+\n+import { CarouselButton, CarouselButtonDot, CarouselButtons, CarouselContainer, CarouselItem, CarouselItemImg, CarouselItemText, CarouselItemTitle, CarouselMobileScrollNode } from './TimeLineStyles';\n+import { Section, SectionDivider, SectionText, SectionTitle } from '../../styles/GlobalComponents';\n+import { TimeLineData } from '../../constants/constants';\n+\n+const TOTAL_CAROUSEL_COUNT = TimeLineData.length;\n+\n+const Timeline = () => {\n+  // const [activeItem, setActiveItem] = useState(0);\n+  // const carouselRef = useRef();\n+\n+  // const scroll = (node, left) => {\n+  //   return node.scrollTo({ left, behavior: 'smooth' });\n+  // }\n+\n+  // const handleClick = (e, i) => {\n+  //   e.preventDefault();\n+\n+  //   if (carouselRef.current) {\n+  //     const scrollLeft = Math.floor(carouselRef.current.scrollWidth * 0.7 * (i / TimeLineData.length));\n+      \n+  //     scroll(carouselRef.current, scrollLeft);\n+  //   }\n+  // }\n+\n+  // const handleScroll = () => {\n+  //   if (carouselRef.current) {\n+  //     const index = Math.round((carouselRef.current.scrollLeft / (carouselRef.current.scrollWidth * 0.7)) * TimeLineData.length);\n+\n+  //     setActiveItem(index);\n+  //   }\n+  // }\n+\n+  // // snap back to beginning of scroll when window is resized\n+  // // avoids a bug where content is covered up if coming from smaller screen\n+  // useEffect(() => {\n+  //   const handleResize = () => {\n+  //     scroll(carouselRef.current, 0);\n+  //   }\n+\n+  //   window.addEventListener('resize', handleResize);\n+  // }, []);\n+\n+  return (\n+    <Section id='about'>\n+<SectionTitle>About me</SectionTitle>\n+    </Section>\n+  );\n+};\n+\n+export default Timeline;\n"
                },
                {
                    "date": 1727096606064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,53 @@\n+import React, { useState, useRef, useEffect } from 'react';\n+\n+import { CarouselButton, CarouselButtonDot, CarouselButtons, CarouselContainer, CarouselItem, CarouselItemImg, CarouselItemText, CarouselItemTitle, CarouselMobileScrollNode } from './TimeLineStyles';\n+import { Section, SectionDivider, SectionText, SectionTitle } from '../../styles/GlobalComponents';\n+import { TimeLineData } from '../../constants/constants';\n+\n+const TOTAL_CAROUSEL_COUNT = TimeLineData.length;\n+\n+const Timeline = () => {\n+  // const [activeItem, setActiveItem] = useState(0);\n+  // const carouselRef = useRef();\n+\n+  // const scroll = (node, left) => {\n+  //   return node.scrollTo({ left, behavior: 'smooth' });\n+  // }\n+\n+  // const handleClick = (e, i) => {\n+  //   e.preventDefault();\n+\n+  //   if (carouselRef.current) {\n+  //     const scrollLeft = Math.floor(carouselRef.current.scrollWidth * 0.7 * (i / TimeLineData.length));\n+      \n+  //     scroll(carouselRef.current, scrollLeft);\n+  //   }\n+  // }\n+\n+  // const handleScroll = () => {\n+  //   if (carouselRef.current) {\n+  //     const index = Math.round((carouselRef.current.scrollLeft / (carouselRef.current.scrollWidth * 0.7)) * TimeLineData.length);\n+\n+  //     setActiveItem(index);\n+  //   }\n+  // }\n+\n+  // // snap back to beginning of scroll when window is resized\n+  // // avoids a bug where content is covered up if coming from smaller screen\n+  // useEffect(() => {\n+  //   const handleResize = () => {\n+  //     scroll(carouselRef.current, 0);\n+  //   }\n+\n+  //   window.addEventListener('resize', handleResize);\n+  // }, []);\n+\n+  return (\n+    <Section id='about'>\n+<SectionTitle>About me</SectionTitle>\n+\n+    </Section>\n+  );\n+};\n+\n+export default Timeline;\n"
                },
                {
                    "date": 1727096613782,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,55 @@\n+import React, { useState, useRef, useEffect } from 'react';\n+\n+import { CarouselButton, CarouselButtonDot, CarouselButtons, CarouselContainer, CarouselItem, CarouselItemImg, CarouselItemText, CarouselItemTitle, CarouselMobileScrollNode } from './TimeLineStyles';\n+import { Section, SectionDivider, SectionText, SectionTitle } from '../../styles/GlobalComponents';\n+import { TimeLineData } from '../../constants/constants';\n+\n+const TOTAL_CAROUSEL_COUNT = TimeLineData.length;\n+\n+const Timeline = () => {\n+  // const [activeItem, setActiveItem] = useState(0);\n+  // const carouselRef = useRef();\n+\n+  // const scroll = (node, left) => {\n+  //   return node.scrollTo({ left, behavior: 'smooth' });\n+  // }\n+\n+  // const handleClick = (e, i) => {\n+  //   e.preventDefault();\n+\n+  //   if (carouselRef.current) {\n+  //     const scrollLeft = Math.floor(carouselRef.current.scrollWidth * 0.7 * (i / TimeLineData.length));\n+      \n+  //     scroll(carouselRef.current, scrollLeft);\n+  //   }\n+  // }\n+\n+  // const handleScroll = () => {\n+  //   if (carouselRef.current) {\n+  //     const index = Math.round((carouselRef.current.scrollLeft / (carouselRef.current.scrollWidth * 0.7)) * TimeLineData.length);\n+\n+  //     setActiveItem(index);\n+  //   }\n+  // }\n+\n+  // // snap back to beginning of scroll when window is resized\n+  // // avoids a bug where content is covered up if coming from smaller screen\n+  // useEffect(() => {\n+  //   const handleResize = () => {\n+  //     scroll(carouselRef.current, 0);\n+  //   }\n+\n+  //   window.addEventListener('resize', handleResize);\n+  // }, []);\n+\n+  return (\n+    <Section id='about'>\n+<SectionTitle>About me</SectionTitle>\n+<Sectiontext>\n+  \n+</Sectiontext>\n+    </Section>\n+  );\n+};\n+\n+export default Timeline;\n"
                },
                {
                    "date": 1727096622370,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,55 @@\n+import React, { useState, useRef, useEffect } from 'react';\n+\n+import { CarouselButton, CarouselButtonDot, CarouselButtons, CarouselContainer, CarouselItem, CarouselItemImg, CarouselItemText, CarouselItemTitle, CarouselMobileScrollNode } from './TimeLineStyles';\n+import { Section, SectionDivider, SectionText, SectionTitle } from '../../styles/GlobalComponents';\n+import { TimeLineData } from '../../constants/constants';\n+\n+const TOTAL_CAROUSEL_COUNT = TimeLineData.length;\n+\n+const Timeline = () => {\n+  // const [activeItem, setActiveItem] = useState(0);\n+  // const carouselRef = useRef();\n+\n+  // const scroll = (node, left) => {\n+  //   return node.scrollTo({ left, behavior: 'smooth' });\n+  // }\n+\n+  // const handleClick = (e, i) => {\n+  //   e.preventDefault();\n+\n+  //   if (carouselRef.current) {\n+  //     const scrollLeft = Math.floor(carouselRef.current.scrollWidth * 0.7 * (i / TimeLineData.length));\n+      \n+  //     scroll(carouselRef.current, scrollLeft);\n+  //   }\n+  // }\n+\n+  // const handleScroll = () => {\n+  //   if (carouselRef.current) {\n+  //     const index = Math.round((carouselRef.current.scrollLeft / (carouselRef.current.scrollWidth * 0.7)) * TimeLineData.length);\n+\n+  //     setActiveItem(index);\n+  //   }\n+  // }\n+\n+  // // snap back to beginning of scroll when window is resized\n+  // // avoids a bug where content is covered up if coming from smaller screen\n+  // useEffect(() => {\n+  //   const handleResize = () => {\n+  //     scroll(carouselRef.current, 0);\n+  //   }\n+\n+  //   window.addEventListener('resize', handleResize);\n+  // }, []);\n+\n+  return (\n+    <Section id='about'>\n+<SectionTitle>About me</SectionTitle>\n+<Sectiontext>\n+  <C\n+</Sectiontext>\n+    </Section>\n+  );\n+};\n+\n+export default Timeline;\n"
                },
                {
                    "date": 1727096631709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,57 @@\n+import React, { useState, useRef, useEffect } from 'react';\n+\n+import { CarouselButton, CarouselButtonDot, CarouselButtons, CarouselContainer, CarouselItem, CarouselItemImg, CarouselItemText, CarouselItemTitle, CarouselMobileScrollNode } from './TimeLineStyles';\n+import { Section, SectionDivider, SectionText, SectionTitle } from '../../styles/GlobalComponents';\n+import { TimeLineData } from '../../constants/constants';\n+\n+const TOTAL_CAROUSEL_COUNT = TimeLineData.length;\n+\n+const Timeline = () => {\n+  // const [activeItem, setActiveItem] = useState(0);\n+  // const carouselRef = useRef();\n+\n+  // const scroll = (node, left) => {\n+  //   return node.scrollTo({ left, behavior: 'smooth' });\n+  // }\n+\n+  // const handleClick = (e, i) => {\n+  //   e.preventDefault();\n+\n+  //   if (carouselRef.current) {\n+  //     const scrollLeft = Math.floor(carouselRef.current.scrollWidth * 0.7 * (i / TimeLineData.length));\n+      \n+  //     scroll(carouselRef.current, scrollLeft);\n+  //   }\n+  // }\n+\n+  // const handleScroll = () => {\n+  //   if (carouselRef.current) {\n+  //     const index = Math.round((carouselRef.current.scrollLeft / (carouselRef.current.scrollWidth * 0.7)) * TimeLineData.length);\n+\n+  //     setActiveItem(index);\n+  //   }\n+  // }\n+\n+  // // snap back to beginning of scroll when window is resized\n+  // // avoids a bug where content is covered up if coming from smaller screen\n+  // useEffect(() => {\n+  //   const handleResize = () => {\n+  //     scroll(carouselRef.current, 0);\n+  //   }\n+\n+  //   window.addEventListener('resize', handleResize);\n+  // }, []);\n+\n+  return (\n+    <Section id='about'>\n+<SectionTitle>About me</SectionTitle>\n+<Sectiontext>\n+  <CarouselContainer>\n+\n+  </CarouselContainer>\n+</SectionText>\n+    </Section>\n+  );\n+};\n+\n+export default Timeline;\n"
                },
                {
                    "date": 1727096644232,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,57 @@\n+import React, { useState, useRef, useEffect } from 'react';\n+\n+import { CarouselButton, CarouselButtonDot, CarouselButtons, CarouselContainer, CarouselItem, CarouselItemImg, CarouselItemText, CarouselItemTitle, CarouselMobileScrollNode } from './TimeLineStyles';\n+import { Section, SectionDivider, SectionText, SectionTitle } from '../../styles/GlobalComponents';\n+import { TimeLineData } from '../../constants/constants';\n+\n+const TOTAL_CAROUSEL_COUNT = TimeLineData.length;\n+\n+const Timeline = () => {\n+  // const [activeItem, setActiveItem] = useState(0);\n+  // const carouselRef = useRef();\n+\n+  // const scroll = (node, left) => {\n+  //   return node.scrollTo({ left, behavior: 'smooth' });\n+  // }\n+\n+  // const handleClick = (e, i) => {\n+  //   e.preventDefault();\n+\n+  //   if (carouselRef.current) {\n+  //     const scrollLeft = Math.floor(carouselRef.current.scrollWidth * 0.7 * (i / TimeLineData.length));\n+      \n+  //     scroll(carouselRef.current, scrollLeft);\n+  //   }\n+  // }\n+\n+  // const handleScroll = () => {\n+  //   if (carouselRef.current) {\n+  //     const index = Math.round((carouselRef.current.scrollLeft / (carouselRef.current.scrollWidth * 0.7)) * TimeLineData.length);\n+\n+  //     setActiveItem(index);\n+  //   }\n+  // }\n+\n+  // // snap back to beginning of scroll when window is resized\n+  // // avoids a bug where content is covered up if coming from smaller screen\n+  // useEffect(() => {\n+  //   const handleResize = () => {\n+  //     scroll(carouselRef.current, 0);\n+  //   }\n+\n+  //   window.addEventListener('resize', handleResize);\n+  // }, []);\n+\n+  return (\n+    <Section id='about'>\n+<SectionTitle>About me</SectionTitle>\n+<SectionText>\n+  <CarouselContainer ref>\n+\n+  </CarouselContainer>\n+</SectionText>\n+    </Section>\n+  );\n+};\n+\n+export default Timeline;\n"
                },
                {
                    "date": 1727096649864,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,495 +45,13 @@\n   return (\n     <Section id='about'>\n <SectionTitle>About me</SectionTitle>\n <SectionText>\n-  <CarouselContainer ref>\n+  <CarouselContainer ref={}>\n \n   </CarouselContainer>\n </SectionText>\n     </Section>\n   );\n };\n \n export default Timeline;\n-import React, { useState, useRef, useEffect } from 'react';\n-\n-import { CarouselButton, CarouselButtonDot, CarouselButtons, CarouselContainer, CarouselItem, CarouselItemImg, CarouselItemText, CarouselItemTitle, CarouselMobileScrollNode } from './TimeLineStyles';\n-import { Section, SectionDivider, SectionText, SectionTitle } from '../../styles/GlobalComponents';\n-import { TimeLineData } from '../../constants/constants';\n-\n-const TOTAL_CAROUSEL_COUNT = TimeLineData.length;\n-\n-const Timeline = () => {\n-  // const [activeItem, setActiveItem] = useState(0);\n-  // const carouselRef = useRef();\n-\n-  // const scroll = (node, left) => {\n-  //   return node.scrollTo({ left, behavior: 'smooth' });\n-  // }\n-\n-  // const handleClick = (e, i) => {\n-  //   e.preventDefault();\n-\n-  //   if (carouselRef.current) {\n-  //     const scrollLeft = Math.floor(carouselRef.current.scrollWidth * 0.7 * (i / TimeLineData.length));\n-      \n-  //     scroll(carouselRef.current, scrollLeft);\n-  //   }\n-  // }\n-\n-  // const handleScroll = () => {\n-  //   if (carouselRef.current) {\n-  //     const index = Math.round((carouselRef.current.scrollLeft / (carouselRef.current.scrollWidth * 0.7)) * TimeLineData.length);\n-\n-  //     setActiveItem(index);\n-  //   }\n-  // }\n-\n-  // // snap back to beginning of scroll when window is resized\n-  // // avoids a bug where content is covered up if coming from smaller screen\n-  // useEffect(() => {\n-  //   const handleResize = () => {\n-  //     scroll(carouselRef.current, 0);\n-  //   }\n-\n-  //   window.addEventListener('resize', handleResize);\n-  // }, []);\n-\n-  return (\n-    <Section id='about'>\n-<SectionTitle>About me</SectionTitle>\n-<Sectiontext>\n-  <CarouselContainer>\n-\n-  </CarouselContainer>\n-</SectionText>\n-    </Section>\n-  );\n-};\n-\n-export default Timeline;\n-import React, { useState, useRef, useEffect } from 'react';\n-\n-import { CarouselButton, CarouselButtonDot, CarouselButtons, CarouselContainer, CarouselItem, CarouselItemImg, CarouselItemText, CarouselItemTitle, CarouselMobileScrollNode } from './TimeLineStyles';\n-import { Section, SectionDivider, SectionText, SectionTitle } from '../../styles/GlobalComponents';\n-import { TimeLineData } from '../../constants/constants';\n-\n-const TOTAL_CAROUSEL_COUNT = TimeLineData.length;\n-\n-const Timeline = () => {\n-  // const [activeItem, setActiveItem] = useState(0);\n-  // const carouselRef = useRef();\n-\n-  // const scroll = (node, left) => {\n-  //   return node.scrollTo({ left, behavior: 'smooth' });\n-  // }\n-\n-  // const handleClick = (e, i) => {\n-  //   e.preventDefault();\n-\n-  //   if (carouselRef.current) {\n-  //     const scrollLeft = Math.floor(carouselRef.current.scrollWidth * 0.7 * (i / TimeLineData.length));\n-      \n-  //     scroll(carouselRef.current, scrollLeft);\n-  //   }\n-  // }\n-\n-  // const handleScroll = () => {\n-  //   if (carouselRef.current) {\n-  //     const index = Math.round((carouselRef.current.scrollLeft / (carouselRef.current.scrollWidth * 0.7)) * TimeLineData.length);\n-\n-  //     setActiveItem(index);\n-  //   }\n-  // }\n-\n-  // // snap back to beginning of scroll when window is resized\n-  // // avoids a bug where content is covered up if coming from smaller screen\n-  // useEffect(() => {\n-  //   const handleResize = () => {\n-  //     scroll(carouselRef.current, 0);\n-  //   }\n-\n-  //   window.addEventListener('resize', handleResize);\n-  // }, []);\n-\n-  return (\n-    <Section id='about'>\n-<SectionTitle>About me</SectionTitle>\n-<Sectiontext>\n-  <C\n-</Sectiontext>\n-    </Section>\n-  );\n-};\n-\n-export default Timeline;\n-import React, { useState, useRef, useEffect } from 'react';\n-\n-import { CarouselButton, CarouselButtonDot, CarouselButtons, CarouselContainer, CarouselItem, CarouselItemImg, CarouselItemText, CarouselItemTitle, CarouselMobileScrollNode } from './TimeLineStyles';\n-import { Section, SectionDivider, SectionText, SectionTitle } from '../../styles/GlobalComponents';\n-import { TimeLineData } from '../../constants/constants';\n-\n-const TOTAL_CAROUSEL_COUNT = TimeLineData.length;\n-\n-const Timeline = () => {\n-  // const [activeItem, setActiveItem] = useState(0);\n-  // const carouselRef = useRef();\n-\n-  // const scroll = (node, left) => {\n-  //   return node.scrollTo({ left, behavior: 'smooth' });\n-  // }\n-\n-  // const handleClick = (e, i) => {\n-  //   e.preventDefault();\n-\n-  //   if (carouselRef.current) {\n-  //     const scrollLeft = Math.floor(carouselRef.current.scrollWidth * 0.7 * (i / TimeLineData.length));\n-      \n-  //     scroll(carouselRef.current, scrollLeft);\n-  //   }\n-  // }\n-\n-  // const handleScroll = () => {\n-  //   if (carouselRef.current) {\n-  //     const index = Math.round((carouselRef.current.scrollLeft / (carouselRef.current.scrollWidth * 0.7)) * TimeLineData.length);\n-\n-  //     setActiveItem(index);\n-  //   }\n-  // }\n-\n-  // // snap back to beginning of scroll when window is resized\n-  // // avoids a bug where content is covered up if coming from smaller screen\n-  // useEffect(() => {\n-  //   const handleResize = () => {\n-  //     scroll(carouselRef.current, 0);\n-  //   }\n-\n-  //   window.addEventListener('resize', handleResize);\n-  // }, []);\n-\n-  return (\n-    <Section id='about'>\n-<SectionTitle>About me</SectionTitle>\n-<Sectiontext>\n-  \n-</Sectiontext>\n-    </Section>\n-  );\n-};\n-\n-export default Timeline;\n-import React, { useState, useRef, useEffect } from 'react';\n-\n-import { CarouselButton, CarouselButtonDot, CarouselButtons, CarouselContainer, CarouselItem, CarouselItemImg, CarouselItemText, CarouselItemTitle, CarouselMobileScrollNode } from './TimeLineStyles';\n-import { Section, SectionDivider, SectionText, SectionTitle } from '../../styles/GlobalComponents';\n-import { TimeLineData } from '../../constants/constants';\n-\n-const TOTAL_CAROUSEL_COUNT = TimeLineData.length;\n-\n-const Timeline = () => {\n-  // const [activeItem, setActiveItem] = useState(0);\n-  // const carouselRef = useRef();\n-\n-  // const scroll = (node, left) => {\n-  //   return node.scrollTo({ left, behavior: 'smooth' });\n-  // }\n-\n-  // const handleClick = (e, i) => {\n-  //   e.preventDefault();\n-\n-  //   if (carouselRef.current) {\n-  //     const scrollLeft = Math.floor(carouselRef.current.scrollWidth * 0.7 * (i / TimeLineData.length));\n-      \n-  //     scroll(carouselRef.current, scrollLeft);\n-  //   }\n-  // }\n-\n-  // const handleScroll = () => {\n-  //   if (carouselRef.current) {\n-  //     const index = Math.round((carouselRef.current.scrollLeft / (carouselRef.current.scrollWidth * 0.7)) * TimeLineData.length);\n-\n-  //     setActiveItem(index);\n-  //   }\n-  // }\n-\n-  // // snap back to beginning of scroll when window is resized\n-  // // avoids a bug where content is covered up if coming from smaller screen\n-  // useEffect(() => {\n-  //   const handleResize = () => {\n-  //     scroll(carouselRef.current, 0);\n-  //   }\n-\n-  //   window.addEventListener('resize', handleResize);\n-  // }, []);\n-\n-  return (\n-    <Section id='about'>\n-<SectionTitle>About me</SectionTitle>\n-\n-    </Section>\n-  );\n-};\n-\n-export default Timeline;\n-import React, { useState, useRef, useEffect } from 'react';\n-\n-import { CarouselButton, CarouselButtonDot, CarouselButtons, CarouselContainer, CarouselItem, CarouselItemImg, CarouselItemText, CarouselItemTitle, CarouselMobileScrollNode } from './TimeLineStyles';\n-import { Section, SectionDivider, SectionText, SectionTitle } from '../../styles/GlobalComponents';\n-import { TimeLineData } from '../../constants/constants';\n-\n-const TOTAL_CAROUSEL_COUNT = TimeLineData.length;\n-\n-const Timeline = () => {\n-  // const [activeItem, setActiveItem] = useState(0);\n-  // const carouselRef = useRef();\n-\n-  // const scroll = (node, left) => {\n-  //   return node.scrollTo({ left, behavior: 'smooth' });\n-  // }\n-\n-  // const handleClick = (e, i) => {\n-  //   e.preventDefault();\n-\n-  //   if (carouselRef.current) {\n-  //     const scrollLeft = Math.floor(carouselRef.current.scrollWidth * 0.7 * (i / TimeLineData.length));\n-      \n-  //     scroll(carouselRef.current, scrollLeft);\n-  //   }\n-  // }\n-\n-  // const handleScroll = () => {\n-  //   if (carouselRef.current) {\n-  //     const index = Math.round((carouselRef.current.scrollLeft / (carouselRef.current.scrollWidth * 0.7)) * TimeLineData.length);\n-\n-  //     setActiveItem(index);\n-  //   }\n-  // }\n-\n-  // // snap back to beginning of scroll when window is resized\n-  // // avoids a bug where content is covered up if coming from smaller screen\n-  // useEffect(() => {\n-  //   const handleResize = () => {\n-  //     scroll(carouselRef.current, 0);\n-  //   }\n-\n-  //   window.addEventListener('resize', handleResize);\n-  // }, []);\n-\n-  return (\n-    <Section id='about'>\n-<SectionTitle>About me</SectionTitle>\n-    </Section>\n-  );\n-};\n-\n-export default Timeline;\n-import React, { useState, useRef, useEffect } from 'react';\n-\n-import { CarouselButton, CarouselButtonDot, CarouselButtons, CarouselContainer, CarouselItem, CarouselItemImg, CarouselItemText, CarouselItemTitle, CarouselMobileScrollNode } from './TimeLineStyles';\n-import { Section, SectionDivider, SectionText, SectionTitle } from '../../styles/GlobalComponents';\n-import { TimeLineData } from '../../constants/constants';\n-\n-const TOTAL_CAROUSEL_COUNT = TimeLineData.length;\n-\n-const Timeline = () => {\n-  // const [activeItem, setActiveItem] = useState(0);\n-  // const carouselRef = useRef();\n-\n-  // const scroll = (node, left) => {\n-  //   return node.scrollTo({ left, behavior: 'smooth' });\n-  // }\n-\n-  // const handleClick = (e, i) => {\n-  //   e.preventDefault();\n-\n-  //   if (carouselRef.current) {\n-  //     const scrollLeft = Math.floor(carouselRef.current.scrollWidth * 0.7 * (i / TimeLineData.length));\n-      \n-  //     scroll(carouselRef.current, scrollLeft);\n-  //   }\n-  // }\n-\n-  // const handleScroll = () => {\n-  //   if (carouselRef.current) {\n-  //     const index = Math.round((carouselRef.current.scrollLeft / (carouselRef.current.scrollWidth * 0.7)) * TimeLineData.length);\n-\n-  //     setActiveItem(index);\n-  //   }\n-  // }\n-\n-  // // snap back to beginning of scroll when window is resized\n-  // // avoids a bug where content is covered up if coming from smaller screen\n-  // useEffect(() => {\n-  //   const handleResize = () => {\n-  //     scroll(carouselRef.current, 0);\n-  //   }\n-\n-  //   window.addEventListener('resize', handleResize);\n-  // }, []);\n-\n-  return (\n-    <Section id='about'>\n-<Sectiontitle>About me</SectionTitle>\n-    </Section>\n-  );\n-};\n-\n-export default Timeline;\n-import React, { useState, useRef, useEffect } from 'react';\n-\n-import { CarouselButton, CarouselButtonDot, CarouselButtons, CarouselContainer, CarouselItem, CarouselItemImg, CarouselItemText, CarouselItemTitle, CarouselMobileScrollNode } from './TimeLineStyles';\n-import { Section, SectionDivider, SectionText, SectionTitle } from '../../styles/GlobalComponents';\n-import { TimeLineData } from '../../constants/constants';\n-\n-const TOTAL_CAROUSEL_COUNT = TimeLineData.length;\n-\n-const Timeline = () => {\n-  // const [activeItem, setActiveItem] = useState(0);\n-  // const carouselRef = useRef();\n-\n-  // const scroll = (node, left) => {\n-  //   return node.scrollTo({ left, behavior: 'smooth' });\n-  // }\n-\n-  // const handleClick = (e, i) => {\n-  //   e.preventDefault();\n-\n-  //   if (carouselRef.current) {\n-  //     const scrollLeft = Math.floor(carouselRef.current.scrollWidth * 0.7 * (i / TimeLineData.length));\n-      \n-  //     scroll(carouselRef.current, scrollLeft);\n-  //   }\n-  // }\n-\n-  // const handleScroll = () => {\n-  //   if (carouselRef.current) {\n-  //     const index = Math.round((carouselRef.current.scrollLeft / (carouselRef.current.scrollWidth * 0.7)) * TimeLineData.length);\n-\n-  //     setActiveItem(index);\n-  //   }\n-  // }\n-\n-  // // snap back to beginning of scroll when window is resized\n-  // // avoids a bug where content is covered up if coming from smaller screen\n-  // useEffect(() => {\n-  //   const handleResize = () => {\n-  //     scroll(carouselRef.current, 0);\n-  //   }\n-\n-  //   window.addEventListener('resize', handleResize);\n-  // }, []);\n-\n-  return (\n-    <Section id='about'>\n-<Sectiontitle>\n-  \n-</Sectiontitle>\n-    </Section>\n-  );\n-};\n-\n-export default Timeline;\n-import React, { useState, useRef, useEffect } from 'react';\n-\n-import { CarouselButton, CarouselButtonDot, CarouselButtons, CarouselContainer, CarouselItem, CarouselItemImg, CarouselItemText, CarouselItemTitle, CarouselMobileScrollNode } from './TimeLineStyles';\n-import { Section, SectionDivider, SectionText, SectionTitle } from '../../styles/GlobalComponents';\n-import { TimeLineData } from '../../constants/constants';\n-\n-const TOTAL_CAROUSEL_COUNT = TimeLineData.length;\n-\n-const Timeline = () => {\n-  // const [activeItem, setActiveItem] = useState(0);\n-  // const carouselRef = useRef();\n-\n-  // const scroll = (node, left) => {\n-  //   return node.scrollTo({ left, behavior: 'smooth' });\n-  // }\n-\n-  // const handleClick = (e, i) => {\n-  //   e.preventDefault();\n-\n-  //   if (carouselRef.current) {\n-  //     const scrollLeft = Math.floor(carouselRef.current.scrollWidth * 0.7 * (i / TimeLineData.length));\n-      \n-  //     scroll(carouselRef.current, scrollLeft);\n-  //   }\n-  // }\n-\n-  // const handleScroll = () => {\n-  //   if (carouselRef.current) {\n-  //     const index = Math.round((carouselRef.current.scrollLeft / (carouselRef.current.scrollWidth * 0.7)) * TimeLineData.length);\n-\n-  //     setActiveItem(index);\n-  //   }\n-  // }\n-\n-  // // snap back to beginning of scroll when window is resized\n-  // // avoids a bug where content is covered up if coming from smaller screen\n-  // useEffect(() => {\n-  //   const handleResize = () => {\n-  //     scroll(carouselRef.current, 0);\n-  //   }\n-\n-  //   window.addEventListener('resize', handleResize);\n-  // }, []);\n-\n-  return (\n-    <Section id='about'>\n-\n-    </Section>\n-  );\n-};\n-\n-export default Timeline;\n-import React, { useState, useRef, useEffect } from 'react';\n-\n-import { CarouselButton, CarouselButtonDot, CarouselButtons, CarouselContainer, CarouselItem, CarouselItemImg, CarouselItemText, CarouselItemTitle, CarouselMobileScrollNode } from './TimeLineStyles';\n-import { Section, SectionDivider, SectionText, SectionTitle } from '../../styles/GlobalComponents';\n-import { TimeLineData } from '../../constants/constants';\n-\n-const TOTAL_CAROUSEL_COUNT = TimeLineData.length;\n-\n-const Timeline = () => {\n-  // const [activeItem, setActiveItem] = useState(0);\n-  // const carouselRef = useRef();\n-\n-  // const scroll = (node, left) => {\n-  //   return node.scrollTo({ left, behavior: 'smooth' });\n-  // }\n-\n-  // const handleClick = (e, i) => {\n-  //   e.preventDefault();\n-\n-  //   if (carouselRef.current) {\n-  //     const scrollLeft = Math.floor(carouselRef.current.scrollWidth * 0.7 * (i / TimeLineData.length));\n-      \n-  //     scroll(carouselRef.current, scrollLeft);\n-  //   }\n-  // }\n-\n-  // const handleScroll = () => {\n-  //   if (carouselRef.current) {\n-  //     const index = Math.round((carouselRef.current.scrollLeft / (carouselRef.current.scrollWidth * 0.7)) * TimeLineData.length);\n-\n-  //     setActiveItem(index);\n-  //   }\n-  // }\n-\n-  // // snap back to beginning of scroll when window is resized\n-  // // avoids a bug where content is covered up if coming from smaller screen\n-  // useEffect(() => {\n-  //   const handleResize = () => {\n-  //     scroll(carouselRef.current, 0);\n-  //   }\n-\n-  //   window.addEventListener('resize', handleResize);\n-  // }, []);\n-\n-  return (\n-    <Section>\n-      \n-    </Section>\n-  );\n-};\n-\n-export default Timeline;\n"
                },
                {
                    "date": 1727096667250,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n const TOTAL_CAROUSEL_COUNT = TimeLineData.length;\n \n const Timeline = () => {\n   // const [activeItem, setActiveItem] = useState(0);\n-  // const carouselRef = useRef();\n+  const carouselRef = useRef();\n \n   // const scroll = (node, left) => {\n   //   return node.scrollTo({ left, behavior: 'smooth' });\n   // }\n"
                },
                {
                    "date": 1727096680782,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,58 @@\n+import React, { useState, useRef, useEffect } from 'react';\n+\n+import { CarouselButton, CarouselButtonDot, CarouselButtons, CarouselContainer, CarouselItem, CarouselItemImg, CarouselItemText, CarouselItemTitle, CarouselMobileScrollNode } from './TimeLineStyles';\n+import { Section, SectionDivider, SectionText, SectionTitle } from '../../styles/GlobalComponents';\n+import { TimeLineData } from '../../constants/constants';\n+\n+const TOTAL_CAROUSEL_COUNT = TimeLineData.length;\n+\n+const Timeline = () => {\n+  // const [activeItem, setActiveItem] = useState(0);\n+  const carouselRef = useRef();\n+\n+  // const scroll = (node, left) => {\n+  //   return node.scrollTo({ left, behavior: 'smooth' });\n+  // }\n+\n+  // const handleClick = (e, i) => {\n+  //   e.preventDefault();\n+\n+  //   if (carouselRef.current) {\n+  //     const scrollLeft = Math.floor(carouselRef.current.scrollWidth * 0.7 * (i / TimeLineData.length));\n+      \n+  //     scroll(carouselRef.current, scrollLeft);\n+  //   }\n+  // }\n+\n+  // const handleScroll = () => {\n+  //   if (carouselRef.current) {\n+  //     const index = Math.round((carouselRef.current.scrollLeft / (carouselRef.current.scrollWidth * 0.7)) * TimeLineData.length);\n+\n+  //     setActiveItem(index);\n+  //   }\n+  // }\n+\n+  // // snap back to beginning of scroll when window is resized\n+  // // avoids a bug where content is covered up if coming from smaller screen\n+  // useEffect(() => {\n+  //   const handleResize = () => {\n+  //     scroll(carouselRef.current, 0);\n+  //   }\n+\n+  //   window.addEventListener('resize', handleResize);\n+  // }, []);\n+\n+  return (\n+    <Section id='about'>\n+<SectionTitle>About me</SectionTitle>\n+<SectionText>\n+  <CarouselContainer ref={carouselRef}>\n+<>\n+</>\n+  </CarouselContainer>\n+</SectionText>\n+    </Section>\n+  );\n+};\n+\n+export default Timeline;\n"
                },
                {
                    "date": 1727096687587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,59 @@\n+import React, { useState, useRef, useEffect } from 'react';\n+\n+import { CarouselButton, CarouselButtonDot, CarouselButtons, CarouselContainer, CarouselItem, CarouselItemImg, CarouselItemText, CarouselItemTitle, CarouselMobileScrollNode } from './TimeLineStyles';\n+import { Section, SectionDivider, SectionText, SectionTitle } from '../../styles/GlobalComponents';\n+import { TimeLineData } from '../../constants/constants';\n+\n+const TOTAL_CAROUSEL_COUNT = TimeLineData.length;\n+\n+const Timeline = () => {\n+  // const [activeItem, setActiveItem] = useState(0);\n+  const carouselRef = useRef();\n+\n+  // const scroll = (node, left) => {\n+  //   return node.scrollTo({ left, behavior: 'smooth' });\n+  // }\n+\n+  // const handleClick = (e, i) => {\n+  //   e.preventDefault();\n+\n+  //   if (carouselRef.current) {\n+  //     const scrollLeft = Math.floor(carouselRef.current.scrollWidth * 0.7 * (i / TimeLineData.length));\n+      \n+  //     scroll(carouselRef.current, scrollLeft);\n+  //   }\n+  // }\n+\n+  // const handleScroll = () => {\n+  //   if (carouselRef.current) {\n+  //     const index = Math.round((carouselRef.current.scrollLeft / (carouselRef.current.scrollWidth * 0.7)) * TimeLineData.length);\n+\n+  //     setActiveItem(index);\n+  //   }\n+  // }\n+\n+  // // snap back to beginning of scroll when window is resized\n+  // // avoids a bug where content is covered up if coming from smaller screen\n+  // useEffect(() => {\n+  //   const handleResize = () => {\n+  //     scroll(carouselRef.current, 0);\n+  //   }\n+\n+  //   window.addEventListener('resize', handleResize);\n+  // }, []);\n+\n+  return (\n+    <Section id='about'>\n+<SectionTitle>About me</SectionTitle>\n+<SectionText>\n+  <CarouselContainer ref={carouselRef}>\n+<>\n+    {TimeLineData.map}\n+</>\n+  </CarouselContainer>\n+</SectionText>\n+    </Section>\n+  );\n+};\n+\n+export default Timeline;\n"
                },
                {
                    "date": 1727096692957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,59 @@\n+import React, { useState, useRef, useEffect } from 'react';\n+\n+import { CarouselButton, CarouselButtonDot, CarouselButtons, CarouselContainer, CarouselItem, CarouselItemImg, CarouselItemText, CarouselItemTitle, CarouselMobileScrollNode } from './TimeLineStyles';\n+import { Section, SectionDivider, SectionText, SectionTitle } from '../../styles/GlobalComponents';\n+import { TimeLineData } from '../../constants/constants';\n+\n+const TOTAL_CAROUSEL_COUNT = TimeLineData.length;\n+\n+const Timeline = () => {\n+  // const [activeItem, setActiveItem] = useState(0);\n+  const carouselRef = useRef();\n+\n+  // const scroll = (node, left) => {\n+  //   return node.scrollTo({ left, behavior: 'smooth' });\n+  // }\n+\n+  // const handleClick = (e, i) => {\n+  //   e.preventDefault();\n+\n+  //   if (carouselRef.current) {\n+  //     const scrollLeft = Math.floor(carouselRef.current.scrollWidth * 0.7 * (i / TimeLineData.length));\n+      \n+  //     scroll(carouselRef.current, scrollLeft);\n+  //   }\n+  // }\n+\n+  // const handleScroll = () => {\n+  //   if (carouselRef.current) {\n+  //     const index = Math.round((carouselRef.current.scrollLeft / (carouselRef.current.scrollWidth * 0.7)) * TimeLineData.length);\n+\n+  //     setActiveItem(index);\n+  //   }\n+  // }\n+\n+  // // snap back to beginning of scroll when window is resized\n+  // // avoids a bug where content is covered up if coming from smaller screen\n+  // useEffect(() => {\n+  //   const handleResize = () => {\n+  //     scroll(carouselRef.current, 0);\n+  //   }\n+\n+  //   window.addEventListener('resize', handleResize);\n+  // }, []);\n+\n+  return (\n+    <Section id='about'>\n+<SectionTitle>About me</SectionTitle>\n+<SectionText>\n+  <CarouselContainer ref={carouselRef}>\n+<>\n+    {TimeLineData.map((item,))}\n+</>\n+  </CarouselContainer>\n+</SectionText>\n+    </Section>\n+  );\n+};\n+\n+export default Timeline;\n"
                },
                {
                    "date": 1727096710852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,59 @@\n+import React, { useState, useRef, useEffect } from 'react';\n+\n+import { CarouselButton, CarouselButtonDot, CarouselButtons, CarouselContainer, CarouselItem, CarouselItemImg, CarouselItemText, CarouselItemTitle, CarouselMobileScrollNode } from './TimeLineStyles';\n+import { Section, SectionDivider, SectionText, SectionTitle } from '../../styles/GlobalComponents';\n+import { TimeLineData } from '../../constants/constants';\n+\n+const TOTAL_CAROUSEL_COUNT = TimeLineData.length;\n+\n+const Timeline = () => {\n+  // const [activeItem, setActiveItem] = useState(0);\n+  const carouselRef = useRef();\n+\n+  // const scroll = (node, left) => {\n+  //   return node.scrollTo({ left, behavior: 'smooth' });\n+  // }\n+\n+  // const handleClick = (e, i) => {\n+  //   e.preventDefault();\n+\n+  //   if (carouselRef.current) {\n+  //     const scrollLeft = Math.floor(carouselRef.current.scrollWidth * 0.7 * (i / TimeLineData.length));\n+      \n+  //     scroll(carouselRef.current, scrollLeft);\n+  //   }\n+  // }\n+\n+  // const handleScroll = () => {\n+  //   if (carouselRef.current) {\n+  //     const index = Math.round((carouselRef.current.scrollLeft / (carouselRef.current.scrollWidth * 0.7)) * TimeLineData.length);\n+\n+  //     setActiveItem(index);\n+  //   }\n+  // }\n+\n+  // // snap back to beginning of scroll when window is resized\n+  // // avoids a bug where content is covered up if coming from smaller screen\n+  // useEffect(() => {\n+  //   const handleResize = () => {\n+  //     scroll(carouselRef.current, 0);\n+  //   }\n+\n+  //   window.addEventListener('resize', handleResize);\n+  // }, []);\n+\n+  return (\n+    <Section id='about'>\n+<SectionTitle>About me</SectionTitle>\n+<SectionText>\n+  <CarouselContainer ref={carouselRef}>\n+<>\n+    {TimeLineData.map((item, index)=>)}\n+</>\n+  </CarouselContainer>\n+</SectionText>\n+    </Section>\n+  );\n+};\n+\n+export default Timeline;\n"
                },
                {
                    "date": 1727096760609,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,61 @@\n+import React, { useState, useRef, useEffect } from 'react';\n+\n+import { CarouselButton, CarouselButtonDot, CarouselButtons, CarouselContainer, CarouselItem, CarouselItemImg, CarouselItemText, CarouselItemTitle, CarouselMobileScrollNode } from './TimeLineStyles';\n+import { Section, SectionDivider, SectionText, SectionTitle } from '../../styles/GlobalComponents';\n+import { TimeLineData } from '../../constants/constants';\n+\n+const TOTAL_CAROUSEL_COUNT = TimeLineData.length;\n+\n+const Timeline = () => {\n+  // const [activeItem, setActiveItem] = useState(0);\n+  const carouselRef = useRef();\n+\n+  // const scroll = (node, left) => {\n+  //   return node.scrollTo({ left, behavior: 'smooth' });\n+  // }\n+\n+  // const handleClick = (e, i) => {\n+  //   e.preventDefault();\n+\n+  //   if (carouselRef.current) {\n+  //     const scrollLeft = Math.floor(carouselRef.current.scrollWidth * 0.7 * (i / TimeLineData.length));\n+      \n+  //     scroll(carouselRef.current, scrollLeft);\n+  //   }\n+  // }\n+\n+  // const handleScroll = () => {\n+  //   if (carouselRef.current) {\n+  //     const index = Math.round((carouselRef.current.scrollLeft / (carouselRef.current.scrollWidth * 0.7)) * TimeLineData.length);\n+\n+  //     setActiveItem(index);\n+  //   }\n+  // }\n+\n+  // // snap back to beginning of scroll when window is resized\n+  // // avoids a bug where content is covered up if coming from smaller screen\n+  // useEffect(() => {\n+  //   const handleResize = () => {\n+  //     scroll(carouselRef.current, 0);\n+  //   }\n+\n+  //   window.addEventListener('resize', handleResize);\n+  // }, []);\n+\n+  return (\n+    <Section id='about'>\n+<SectionTitle>About me</SectionTitle>\n+<SectionText>\n+  <CarouselContainer ref={carouselRef}>\n+<>\n+    {TimeLineData.map((item, index)=>(\n+      <Course\n+    ))}\n+</>\n+  </CarouselContainer>\n+</SectionText>\n+    </Section>\n+  );\n+};\n+\n+export default Timeline;\n"
                },
                {
                    "date": 1727096767002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,61 @@\n+import React, { useState, useRef, useEffect } from 'react';\n+\n+import { CarouselButton, CarouselButtonDot, CarouselButtons, CarouselContainer, CarouselItem, CarouselItemImg, CarouselItemText, CarouselItemTitle, CarouselMobileScrollNode } from './TimeLineStyles';\n+import { Section, SectionDivider, SectionText, SectionTitle } from '../../styles/GlobalComponents';\n+import { TimeLineData } from '../../constants/constants';\n+\n+const TOTAL_CAROUSEL_COUNT = TimeLineData.length;\n+\n+const Timeline = () => {\n+  // const [activeItem, setActiveItem] = useState(0);\n+  const carouselRef = useRef();\n+\n+  // const scroll = (node, left) => {\n+  //   return node.scrollTo({ left, behavior: 'smooth' });\n+  // }\n+\n+  // const handleClick = (e, i) => {\n+  //   e.preventDefault();\n+\n+  //   if (carouselRef.current) {\n+  //     const scrollLeft = Math.floor(carouselRef.current.scrollWidth * 0.7 * (i / TimeLineData.length));\n+      \n+  //     scroll(carouselRef.current, scrollLeft);\n+  //   }\n+  // }\n+\n+  // const handleScroll = () => {\n+  //   if (carouselRef.current) {\n+  //     const index = Math.round((carouselRef.current.scrollLeft / (carouselRef.current.scrollWidth * 0.7)) * TimeLineData.length);\n+\n+  //     setActiveItem(index);\n+  //   }\n+  // }\n+\n+  // // snap back to beginning of scroll when window is resized\n+  // // avoids a bug where content is covered up if coming from smaller screen\n+  // useEffect(() => {\n+  //   const handleResize = () => {\n+  //     scroll(carouselRef.current, 0);\n+  //   }\n+\n+  //   window.addEventListener('resize', handleResize);\n+  // }, []);\n+\n+  return (\n+    <Section id='about'>\n+<SectionTitle>About me</SectionTitle>\n+<SectionText>\n+  <CarouselContainer ref={carouselRef}>\n+<>\n+    {TimeLineData.map((item, index)=>(\n+      <CarouselMobileScrollNode\n+    ))}\n+</>\n+  </CarouselContainer>\n+</SectionText>\n+    </Section>\n+  );\n+};\n+\n+export default Timeline;\n"
                },
                {
                    "date": 1727096773747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,11 @@\n <SectionText>\n   <CarouselContainer ref={carouselRef}>\n <>\n     {TimeLineData.map((item, index)=>(\n-      <CarouselMobileScrollNode key={index} />\n+      <CarouselMobileScrollNode key={index} >\n+        \n+      </CarouselMobileScrollNode>\n     ))}\n </>\n   </CarouselContainer>\n </SectionText>\n"
                },
                {
                    "date": 1727096779128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,63 @@\n+import React, { useState, useRef, useEffect } from 'react';\n+\n+import { CarouselButton, CarouselButtonDot, CarouselButtons, CarouselContainer, CarouselItem, CarouselItemImg, CarouselItemText, CarouselItemTitle, CarouselMobileScrollNode } from './TimeLineStyles';\n+import { Section, SectionDivider, SectionText, SectionTitle } from '../../styles/GlobalComponents';\n+import { TimeLineData } from '../../constants/constants';\n+\n+const TOTAL_CAROUSEL_COUNT = TimeLineData.length;\n+\n+const Timeline = () => {\n+  // const [activeItem, setActiveItem] = useState(0);\n+  const carouselRef = useRef();\n+\n+  // const scroll = (node, left) => {\n+  //   return node.scrollTo({ left, behavior: 'smooth' });\n+  // }\n+\n+  // const handleClick = (e, i) => {\n+  //   e.preventDefault();\n+\n+  //   if (carouselRef.current) {\n+  //     const scrollLeft = Math.floor(carouselRef.current.scrollWidth * 0.7 * (i / TimeLineData.length));\n+      \n+  //     scroll(carouselRef.current, scrollLeft);\n+  //   }\n+  // }\n+\n+  // const handleScroll = () => {\n+  //   if (carouselRef.current) {\n+  //     const index = Math.round((carouselRef.current.scrollLeft / (carouselRef.current.scrollWidth * 0.7)) * TimeLineData.length);\n+\n+  //     setActiveItem(index);\n+  //   }\n+  // }\n+\n+  // // snap back to beginning of scroll when window is resized\n+  // // avoids a bug where content is covered up if coming from smaller screen\n+  // useEffect(() => {\n+  //   const handleResize = () => {\n+  //     scroll(carouselRef.current, 0);\n+  //   }\n+\n+  //   window.addEventListener('resize', handleResize);\n+  // }, []);\n+\n+  return (\n+    <Section id='about'>\n+<SectionTitle>About me</SectionTitle>\n+<SectionText>\n+  <CarouselContainer ref={carouselRef}>\n+<>\n+    {TimeLineData.map((item, index)=>(\n+      <CarouselMobileScrollNode key={index} final>\n+\n+      </CarouselMobileScrollNode>\n+    ))}\n+</>\n+  </CarouselContainer>\n+</SectionText>\n+    </Section>\n+  );\n+};\n+\n+export default Timeline;\n"
                }
            ],
            "date": 1727020085735,
            "name": "Commit-0",
            "content": "import React, { useState, useRef, useEffect } from 'react';\n\nimport { CarouselButton, CarouselButtonDot, CarouselButtons, CarouselContainer, CarouselItem, CarouselItemImg, CarouselItemText, CarouselItemTitle, CarouselMobileScrollNode } from './TimeLineStyles';\nimport { Section, SectionDivider, SectionText, SectionTitle } from '../../styles/GlobalComponents';\nimport { TimeLineData } from '../../constants/constants';\n\nconst TOTAL_CAROUSEL_COUNT = TimeLineData.length;\n\nconst Timeline = () => {\n  // const [activeItem, setActiveItem] = useState(0);\n  // const carouselRef = useRef();\n\n  // const scroll = (node, left) => {\n  //   return node.scrollTo({ left, behavior: 'smooth' });\n  // }\n\n  // const handleClick = (e, i) => {\n  //   e.preventDefault();\n\n  //   if (carouselRef.current) {\n  //     const scrollLeft = Math.floor(carouselRef.current.scrollWidth * 0.7 * (i / TimeLineData.length));\n      \n  //     scroll(carouselRef.current, scrollLeft);\n  //   }\n  // }\n\n  // const handleScroll = () => {\n  //   if (carouselRef.current) {\n  //     const index = Math.round((carouselRef.current.scrollLeft / (carouselRef.current.scrollWidth * 0.7)) * TimeLineData.length);\n\n  //     setActiveItem(index);\n  //   }\n  // }\n\n  // // snap back to beginning of scroll when window is resized\n  // // avoids a bug where content is covered up if coming from smaller screen\n  // useEffect(() => {\n  //   const handleResize = () => {\n  //     scroll(carouselRef.current, 0);\n  //   }\n\n  //   window.addEventListener('resize', handleResize);\n  // }, []);\n\n  return (\n    <div>\n      Timeline\n    </div>\n  );\n};\n\nexport default Timeline;\n"
        }
    ]
}